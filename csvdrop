#!/usr/bin/env python
#
# Author:       Harrison Hubbell <harrison.hubbell@logicsupply.com>
# Created:      11/09/2015
# Description:  Remove the specified columns from an input csv and
#               return the result to outfile (default STDOUT).
#

import argparse
import csv
import sys

def read(src, header=True, delimiter=','):
    """
    Open a specified CSV file and read it.
    :param src:         File path
    :option header:     CSV file has a header row
    :option delimiter:  CSV item delimiter
    :return tuple:      header, rows tuple
    """
    reader = csv.reader(src, delimiter=delimiter)
    head = next(reader) if header is True else None

    return head, list(reader)

def find(haystack, needles):
    """
    Return the indexed of the needles in the haystack
    :param haystack:    List to search
    :param needles:     List of items to find
    :return list:       List of indexes matching needles in haystack
    """
    return [haystack.index(x) for x in needles]

def imask(vals, indexes):
    """
    Mask a list based on a list of indexes
    :param vals:        List to mask
    :param indexes:     List of indexes to apply
    :return list:       Masked list
    """
    return [x for i, x in enumerate(vals) if i not in indexes]

def write(fileobj, header, rows):
    """
    Dump data to file object
    :param fileobj:     File object to write to
    :param header:      csv header
    :param rows:        csv rows
    """
    try:
        writer = csv.writer(fileobj, lineterminator='\n')
        writer.writerow(header)
        writer.writerows(rows)
    except IOError:
        fileobj.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('infile',
        type=argparse.FileType('r'),
        default=sys.stdin)
    #parser.add_argument('outfile',
    #    nargs='?',
    #    type=argparse.FileType('w'),
    #    default=sys.stdout)
    parser.add_argument('cols',
        nargs='+')
    parser.add_argument('-d', '--delim')

    args = parser.parse_args()
    
    infile = args.infile
    #outfile = args.outfile
    outfile = sys.stdout
    cols = args.cols
    delim = args.delim.decode('string-escape') if args.delim else ','

    header, rows = read(infile)
    drops = find(header, cols)

    mheader = imask(header, drops)
    mrows = []

    for row in rows:
        mrows.append(imask(row, drops))

    write(outfile, mheader, mrows)
