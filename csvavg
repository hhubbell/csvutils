#!/usr/bin/env python
#
# Author:       Harrison Hubbell <harrison.hubbell@logicsupply.com>
# Created:      11/09/2015
# Description:  Average the specified columns from an input csv and
#               return the result to STDOUT.
#

from __future__ import division, print_function
import argparse
import csv
import sys

OUT = '{:<{}} {:>{}}'

def read(src, header=True, delimiter=','):
    """
    Open a specified CSV file and read it.
    :param src:         File path
    :option header:     CSV file has a header row
    :option delimiter:  CSV item delimiter
    :return tuple:      header, rows tuple
    """
    reader = csv.reader(src, delimiter=delimiter)
    head = next(reader) if header is True else None

    return head, list(reader)

def find(haystack, needles):
    """
    Return the indexed of the needles in the haystack
    :param haystack:    List to search
    :param needles:     Items to find
    :return list:       List of indexes matching needles in haystack
    """
    if needles:
        indexes = [haystack.index(x) for x in needles]
    else:
        indexes = range(len(haystack))

    return indexes

def tofloat(value):
    """
    Convert a value to a float.  Return 0 for any failures.
    :param value:       Value to convert
    :return float:      Converted value
    """
    try:
        number = float(value)
    except ValueError:
        number = 0.0

    return number

def avg(values):
    """
    Return the average of a list of numbers
    :param values:      Iter of values
    :return float:      Average of values
    """
    lvs = list(values)
    return sum(lvs) / len(lvs)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('infile',
        type=argparse.FileType('r'),
        default=sys.stdin)
    parser.add_argument('cols',
        nargs=argparse.REMAINDER)
    parser.add_argument('-a', '--alphabetize',
        action='store_true')
    parser.add_argument('-d', '--delim')
    parser.add_argument('-p', '--precision',
        type=int)
    parser.add_argument('-t', '--tabulate',
        action='store_true')


    args = parser.parse_args()

    infile = args.infile
    cols = args.cols
    delim = args.delim.decode('string-escape') if args.delim else ','

    header, rows = read(infile, delimiter=delim)
    tosum = find(header, cols)
    sums = []

    for index in tosum:
        sums.append(avg(tofloat(x[index]) for x in rows))

    if args.precision:
        sums = ['{:.{}f}'.format(x, args.precision) for x in sums]

    if args.tabulate is True:
        hwidth = max(len(header[i]) for i in tosum) + 1
        rwidth = max(len(str(x)) for x in sums)
    else:
        hwidth = ''
        rwidth = ''

    if args.alphabetize is True:
        zipped = sorted(zip(tosum, sums), key=lambda x: header[x[0]])
    else:
        zipped = zip(tosum, sums)

    for index, value in zipped:
        print(OUT.format(header[index] + ':', hwidth, value, rwidth))
