#!/usr/bin/env python
#
# Create an HTML table from a csv and return the result to stdout.
#

import csvutils as cu
import sys


def makerow(row, header=False, tabs=False):
    """
    Format one row of data
    :param row:         Row to format
    :option header:     Header row flag
    :option tabs:       Make html human readable by using \n and \t. Tabs
                        will be 4 spaces
    :return str:        Table row
    """
    tabf = '    ' if tabs is True else ''
    newl = '\n' if tabs is True else ''
    joiner = '{}{}'.format(newl, tabf * 2)

    col = '<td>{}</td>' if header is False else '<th>{}</th>'
    return '{t}<tr>{j}{col}{n}{t}</tr>'.format(
        col=joiner.join(col.format(x) for x in row),
        j=joiner,
        n=newl,
        t=tabf)

def write(fileobj, header, rows, pretty=False):
    """
    Dump data to file object
    :param fileobj:     File object to write to
    :param header:      csv header
    :param rows:        csv rows
    :option pretty:     True makes html readable
    """
    TABLE = '<table>\n{}{}\n</table>\n'

    try:
        h = makerow(header, header=True, tabs=pretty) if header else ''
        r = (makerow(x, tabs=pretty) for x in rows)

        fileobj.write(TABLE.format(h, '\n'.join(r)))

    except IOError:
        fileobj.close()

if __name__ == '__main__':
    parser = cu.default_arguments()
    parser.add_argument('-D', '--no-display-header',
        action='store_false',
        dest='display_header')
    parser.add_argument('-p', '--pretty',
        action='store_true',
        help='Try to make the html human readable')

    args = parser.parse_args()
    
    infile = args.infile
    outfile = sys.stdout
    header = args.header and args.display_header
    delim = args.delim.decode('string-escape')

    header, rows = cu.read(infile, header=header, delimiter=delim)

    if header is None and args.header is False:
        header = cu.generic_header(len(rows[0]))

    write(outfile, header, rows, pretty=args.pretty)
