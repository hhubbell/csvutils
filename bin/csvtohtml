#!/usr/bin/env python
#
# Create an HTML table from a csv and return the result to stdout.
#

from __future__ import print_function
import csvutils as cu
import sys


def makerow(row, header=False, tabs=False):
    """
    Format one row of data
    :param row:         Row to format
    :option header:     Header row flag
    :option tabs:       Make html human readable by using \n and \t. Tabs
                        will be 4 spaces
    :return str:        Table row
    """
    tabf = '    ' if tabs is True else ''
    newl = '\n' if tabs is True else ''
    joiner = '{}{}'.format(newl, tabf * 2)

    col = '<td>{}</td>' if header is False else '<th>{}</th>'
    return '{t}<tr>{j}{col}{n}{t}</tr>'.format(
        col=joiner.join(col.format(x) for x in row),
        j=joiner,
        n=newl,
        t=tabf)

def write(header, rows, pretty=False):
    """
    Dump data to file object
    :param fileobj:     File object to write to
    :param header:      csv header
    :param rows:        csv rows
    :option pretty:     True makes html readable
    """
    try:
        print('<table>')

        if header is not None:
            print(makerow(header, header=True, tabs=pretty))
        
        for row in rows:
            print(makerow(row, tabs=pretty))

        print('</table>')

    except IOError:
        pass

if __name__ == '__main__':
    parser = cu.default_arguments()
    parser.add_argument('-N', '--no-header',
        action='store_false')
    parser.add_argument('-p', '--pretty',
        action='store_true',
        help='Try to make the html human readable')

    args = parser.parse_args()
    
    infile = args.infile
    no_head = args.no_header
    delim = args.delim.decode('string-escape')

    write(*cu.read(infile, header=no_head, delimiter=delim), pretty=args.pretty)
