#!/usr/bin/env python
#
# Author:       Harrison Hubbell <harrison.hubbell@logicsupply.com>
# Created:      11/09/2015
# Description:  Sum the specified columns from an input csv and
#               return the result to STDOUT. Use python3 for better
#               unicode support
#

from __future__ import print_function
import argparse
import csv
import sys

def align(value):
    """
    """
    if type(value) is str:
        try:
            float(value)
            alg = '>'
        except ValueError:
            alg = '<'
    elif type(value) is int or type(value) is float:
        alg = '>'
    else:
        alg = '<'

    return alg

def fmt(string, width):
    """
    """
    COLFMT = '{:{}{}}'
    return COLFMT.format(string, align(string), width)

def fmtcolmax(header, rows, maxw=None):
    """
    """
    full = list(rows)
    full.insert(0, header)
    flat = zip(*full)
    fmtcol = []

    for head, vals in zip(header, flat):
        cmax = max(len(x) for x in vals)
        cmax = maxw if maxw is not None and maxw < cmax else cmax
        fmtcol.append(map(
            lambda x: fmt(trunc(x, cmax), cmax) if len(x) > cmax else fmt(x, cmax),
            vals))

    return list(zip(*fmtcol))

def read(src, header=True, delimiter=','):
    """
    Open a specified CSV file and read it.
    :param src:         File path
    :option header:     CSV file has a header row
    :option delimiter:  CSV item delimiter
    """
    reader = csv.reader(src, delimiter=delimiter)
    head = next(reader) if header is True else None

    return head, list(reader)

def trunc(string, width, replace='...'):
    """
    """
    return string[:width - 3] + replace

def write(header, rows):
    """
    """
    try:
        print(*header)
        for row in rows:
            print(*row)
    except IOError:
        pass

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('infile',
        type=argparse.FileType('r'),
        default=sys.stdin)
    parser.add_argument('-m', '--maxlength',
        type=int)

    args = parser.parse_args()

    infile = args.infile
    maxlength = args.maxlength

    header, rows = read(infile)
    fmtrows = fmtcolmax(header, rows, maxlength)    
    fmtheader = fmtrows.pop(0)

    write(fmtheader, fmtrows)
