#!/usr/bin/env python
#
# Author:       Harrison Hubbell <harrison.hubbell@logicsupply.com>
# Created:      06/05/2016
# Description:  Create an HTML table from a CSV
#

from __future__ import print_function
import argparse
import csv
import sys

def read(src, header=True, delimiter=','):
    """
    Open a specified CSV file and read it.
    :param src:         File path
    :option header:     CSV file has a header row
    :option delimiter:  CSV item delimiter
    :return tuple:      header, rows tuple
    """
    reader = csv.reader(src, delimiter=delimiter)
    head = next(reader) if header is True else None

    return head, list(reader)

def makerow(row, header=False, tabs=False):
    """
    Format one row of data
    :param row:         Row to format
    :option header:     Header row flag
    :option tabs:       Make html human readable by using \n and \t. Tabs
                        will be 4 spaces
    :return str:        Table row
    """
    tabf = '    ' if tabs is True else ''
    newl = '\n' if tabs is True else ''
    joiner = '{}{}'.format(newl, tabf * 2)

    col = '<td>{}</td>' if header is False else '<th>{}</th>'
    return '{t}<tr>{j}{col}{n}{t}</tr>'.format(
        col=joiner.join(col.format(x) for x in row),
        j=joiner,
        n=newl,
        t=tabf)

def write(header, rows, pretty=False):
    """
    Dump data to file object
    :param fileobj:     File object to write to
    :param header:      csv header
    :param rows:        csv rows
    :option pretty:     True makes html readable
    """
    try:
        print('<table>')
        print(makerow(header, header=True, tabs=pretty))
        for row in rows:
            print(makerow(row, tabs=pretty))
        print('</table>')

    except IOError:
        pass

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('infile', nargs='?',
        type=argparse.FileType('r'),
        default=sys.stdin)
    parser.add_argument('-d', '--delim',
        nargs='?',
        default=',')
    parser.add_argument('-p', '--pretty',
        action='store_true',
        help='Try to make the html human readable')

    args = parser.parse_args()
    
    infile = args.infile
    delim = args.delim.decode('string-escape')

    write(*read(infile, delimiter=delim), pretty=args.pretty)
